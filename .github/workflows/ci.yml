name: Continuous Integration

# Controls when the workflow will run
on:
  push:
    tags:
      - 'test*'
  workflow_dispatch:

jobs:
  linter:
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
        poetry-version: ['1.7.1']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install R (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libtirpc-dev libcurl4-openssl-dev libssl-dev libxml2-dev libbz2-dev liblzma-dev
          sudo apt-get install -y r-base

      - name: Install R (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install r

      - name: Install R (Windows)
        if: runner.os == 'Windows'
        run: choco install r.project -y

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install project (dev)
        run: poetry install --with dev

      - name: Run linter
        run: make lint

  tests_linux:
    needs: linter
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
        poetry-version: ['1.7.1']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install R (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y libtirpc-dev libcurl4-openssl-dev libssl-dev libxml2-dev libbz2-dev liblzma-dev
          sudo apt-get install -y r-base

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install project (dev)
        run: poetry install --with dev

      # Run tests with pytest and produce coverage.xml for Codecov
      - name: Run tests with coverage (pytest)
        run: |
          # If pytest/pytest-cov are not installed as dev-dependencies, this ensures they exist in the venv
          poetry run pip install pytest pytest-cov

          # Run pytest and write coverage.xml
          # Replace `garage` with your package directory name if different
          poetry run pytest --maxfail=1 --disable-warnings --cov=garage --cov-branch --cov-report=xml

      - name: Show coverage file (for debugging)
        run: |
          echo "Repository root files:"
          ls -la
          echo "Does coverage.xml exist?"
          if [ -f coverage.xml ]; then echo "YES - coverage.xml present"; else echo "NO - coverage.xml missing"; fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          fail_ci_if_error: true
          verbose: true
          # token: ${{ secrets.CODECOV_TOKEN }}  # uncomment and set secret for private repos

  tests_mac:
    needs: linter
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
        poetry-version: ['1.7.1']
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install R (macOS)
        run: |
          brew update
          brew install r

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install project (dev)
        run: poetry install --with dev

      - name: Run tests
        run: make test

  tests_windows:
    needs: linter
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.12" ]
        poetry-version: [ "1.7.1" ]
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install R on Windows 
        run: choco install r.project -y

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install project (dev)
        run: poetry install --with dev

      - name: Run tests
        run: make test
